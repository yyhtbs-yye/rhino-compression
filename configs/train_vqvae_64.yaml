_import: configs/train_base_data.yaml

boat:
  path: 'rhcompression.boats.vqvae_boat'
  name: 'VQVAEBoat'

  # BaseGANBoat hyperparams
  hyperparameters:
    lambda_image: 0.5
    lambda_image_bs: 2.0
    lambda_codebook: 1.0
    lambda_commit: 0.25
    lambda_lpips: 1.0
    lambda_usage: 0.05

  models:
    # Multi-scale VQ-VAE tokenizer
    net:
      path: 'rhcompression.nn.ae.ae'
      name: 'AutoEncoder'
      params: 
        base_channels: 128
        embed_dim: 32
    vq:
      path: 'rhcompression.nn.vqvae.vq'
      name: 'VectorQuantizer'
      params: 
        vocab_size: 4096
        embed_dim: 32
        use_znorm: true

  losses:
    pixel_loss:
      path: 'torch.nn'
      name: 'MSELoss'
      params: {}

    codebook_loss:
      path: 'torch.nn'
      name: 'MSELoss'
      params: {}

    commit_loss:
      path: 'torch.nn'
      name: 'MSELoss'
      params: {}

    lpips_loss:
      path: 'lpips'
      name: 'LPIPS'
      params:
        net: 'vgg'

optimization:
  target_loss_key: 'total_loss'
  net:
    path: 'torch.optim'
    name: 'Adam'
    params:
      lr: 0.0001
      betas: [0.0, 0.99]
      weight_decay: 0.0
    lr_scheduler: {}

  vq:
    path: 'torch.optim'
    name: 'Adam'
    params:
      lr: 0.01
      betas: [0.0, 0.99]
      weight_decay: 0.0
    lr_scheduler: {}

  use_ema:
    ema_decay: 0.999
    ema_start: $ema_start

trainer:
  devices: $devices
  max_epochs: $max_epochs
  val_check_epochs: 1
  state_save_epochs: 1
  fup_by_key: # Setup find unused parameters, this is particular useful for DDP. 
    net: True
    vq: True

visualization:
  save_images: true
  first_batch_only: true
  wnb: [0.5, 0.5]
  num_vis_samples: 4

validation:
  target_metric_name: psnr
  metrics:
    psnr:
      path: 'torchmetrics.image'
      name: 'PeakSignalNoiseRatio'
      wrapper: 'rhcore.metrics.wrappers.dict_2_params.Dict2ListParams'
      params:
        data_range: 2.0
    ssim:
      path: 'torchmetrics.image'
      name: 'StructuralSimilarityIndexMeasure'
      wrapper: 'rhcore.metrics.wrappers.dict_2_params.Dict2ListParams'
      params: {}
      
logging:
  root_dir: 'work_dirs'
  name: $experiment_name
  loggers:
    tensorboard:
      path: 'trainer.loggers.tensorboard'
      name: 'TensorBoardLogger'
      params:
        log_dir: 'work_dirs'
        name: $experiment_name

callbacks:
  - path: trainer.callbacks.state_cleaner
    name: KeepTopKStateCallback
    params:
      top_k: 5

_vars:
  devices: [1, 2, 3, 4]
  max_epochs: 1000

  train_batch_size: 256
  valid_batch_size: 32
  num_workers: 16

  # point these to your datasets (normalized to [-1,1] in datamodule)
  train_folder_paths:
    gt: data/ffhq/ffhq_imgs/ffhq_64
  valid_folder_paths:
    gt: data/celeba/subsets/celeba_64

  experiment_name: vqvae_ffhq_64
  ema_start: 1000
